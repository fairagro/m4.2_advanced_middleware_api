"""Integration tests configuration and fixtures."""

import os
from collections.abc import Generator
from typing import Any

import pytest
from dotenv import load_dotenv
from fastapi.testclient import TestClient
from gitlab import Gitlab, GitlabError

from middleware_api.api import Api
from middleware_api.config import Config
from middleware_api.utils.config_wrapper import ConfigWrapper, DictType, ListType

from ..shared_fixtures import cert  # noqa: F401, pylint: disable=unused-import

# Load environment variables from .env file (generated by load-env.sh)
load_dotenv()


@pytest.fixture(scope="session")
def config() -> "DictType | ListType":
    """Provide configuration for tests."""
    config_wrapper = ConfigWrapper.from_data(
        {
            "gitlab_api": {
                "url": "https://datahub-dev.ipk-gatersleben.de",
                "group": "FAIRagro-advanced-middleware-integration-tests",
                "token": "",
            }
        }
    )
    return config_wrapper.unwrap()
    # return {
    #     "gitlab_api": {
    #         "url": "https://datahub-dev.ipk-gatersleben.de",
    #         "group": "FAIRagro-advanced-middleware-integration-tests",
    #         "token": "",
    #     }
    # }


@pytest.fixture(scope="session")
def gitlab_api(
    config: dict[str, Any],
) -> Gitlab:  # pylint: disable=redefined-outer-name
    """Provide a Gitlab API client for tests."""
    token = os.getenv("GITLAB_API_TOKEN")
    return Gitlab(config["gitlab_api"]["url"], private_token=token)


@pytest.fixture(scope="session")
def gitlab_group(config: dict[str, Any], gitlab_api: Gitlab) -> Any:  # pylint: disable=redefined-outer-name
    """Provide the Gitlab group for tests."""
    group = gitlab_api.groups.get(config["gitlab_api"]["group"])
    return group


@pytest.fixture
def middleware_api(
    config: dict[str, Any],
) -> Api:  # pylint: disable=redefined-outer-name
    """Provide the Middleware API instance for tests."""
    config_validated = Config.from_data(config)
    return Api(config_validated)


@pytest.fixture
def client(
    middleware_api: Api,
) -> Generator[TestClient, None, None]:  # pylint: disable=redefined-outer-name
    """Provide a TestClient for the Middleware API."""
    with TestClient(middleware_api.app) as c:
        yield c


@pytest.fixture(scope="session", autouse=True)
def cleanup_gitlab_group(gitlab_group: Any, gitlab_api: Gitlab) -> None:  # pylint: disable=redefined-outer-name
    """Cleanup the Gitlab group before tests."""
    # delete all projects in the group
    for project in gitlab_group.projects.list(all=True):
        try:
            full_project = gitlab_api.projects.get(project.id)
            full_project.delete()
            print(f"Deleted test project: {project.name}")
        except GitlabError as e:
            print(f"Failed to delete project {project.name}: {e}")
