name: Docker Build and Test (Reusable)

on:
  workflow_call:
    inputs:
      push_to_registry:
        description: 'Whether to push to DockerHub registry'
        required: false
        type: boolean
        default: false
      save_image:
        description: 'Whether to save Docker image as artifact for reuse'
        required: false
        type: boolean
        default: false
      version_bump:
        description: 'Version bump type for GitVersion'
        required: false
        type: string
        default: 'patch'
    outputs:
      version:
        description: 'Calculated version'
        value: ${{ jobs.calculate-version.outputs.version }}
      SemVer:
        description: 'Semantic version'
        value: ${{ jobs.calculate-version.outputs.SemVer }}
      Major:
        description: 'Major version'
        value: ${{ jobs.calculate-version.outputs.Major }}
      Minor:
        description: 'Minor version'
        value: ${{ jobs.calculate-version.outputs.Minor }}
      image-digest:
        description: 'Docker image digest'
        value: ${{ jobs.build-docker-image.outputs.image-digest }}
      dockerhub-pushed:
        description: 'Whether image was pushed to DockerHub'
        value: ${{ jobs.build-docker-image.outputs.dockerhub-pushed }}

env:
  GIT_USER_NAME: ${{ vars.GIT_USER_NAME || 'GitHub Pipeline' }}
  GIT_USER_EMAIL: ${{ vars.GIT_USER_EMAIL || 'github_pipeline@fairagro.net' }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME || 'fairagro_advanced_middleware_api' }}
  DOCKERHUB_NAMESPACE: ${{ vars.DOCKERHUB_NAMESPACE || 'zalf' }}
  IMAGE_TITLE: ${{ vars.IMAGE_TITLE || 'FairAgro Advanced Middleware API' }}
  IMAGE_DESCRIPTION: ${{ vars.IMAGE_DESCRIPTION || 'Advanced middleware API for FairAgro platform' }}
  GITVERSION_TAG_PREFIX: ${{ vars.GITVERSION_TAG_PREFIX || '.*-docker-v' }}
  DOCKER_PLATFORMS: ${{ vars.DOCKER_PLATFORMS || 'linux/amd64' }}

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ env.IS_FEATURE_BRANCH == 'true' && steps.gitversion.outputs.semVer || steps.gitversion.outputs.majorMinorPatch }}
      SemVer: ${{ steps.gitversion.outputs.semVer }}
      Major: ${{ steps.gitversion.outputs.major }}
      Minor: ${{ steps.gitversion.outputs.minor }}
    env:
      IS_FEATURE_BRANCH: ${{ startsWith(github.ref_name, 'feature/') }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '6.4.x'

      - name: Create GitVersion config
        uses: DamianReeves/write-file-action@master
        with:
          path: GitVersion.yml
          write-mode: overwrite
          contents: |
            mode: ContinuousDeployment
            tag-prefix: '${{ env.GITVERSION_TAG_PREFIX }}'
            semantic-version-format: Strict
            branches:
              main:
                label: ''
                increment: ${{ inputs.version_bump }}
              feature:
                regex: ^feature/(?<BranchName>.+)$
                label: '{BranchName}'
                increment: Inherit
                track-merge-target: false

      - name: Execute GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4

      - name: Debug version info
        run: |
          echo "üîß Version Bump Configuration:"
          echo "  - Input version_bump: ${{ inputs.version_bump }}"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Is feature branch: ${{ env.IS_FEATURE_BRANCH }}"
          echo ""
          echo "üìä GitVersion Results:"
          echo "  - SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "  - MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "  - Final version: ${{ env.IS_FEATURE_BRANCH == 'true' && steps.gitversion.outputs.semVer || steps.gitversion.outputs.majorMinorPatch }}"

  build-docker-image:
    needs: calculate-version
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      dockerhub-pushed: ${{ env.DOCKERHUB_AVAILABLE == 'true' && inputs.push_to_registry }}

    env:
      DOCKERHUB_AVAILABLE: ${{ secrets.DOCKERHUB_USER != '' && secrets.DOCKERHUB_TOKEN != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug DockerHub Configuration
        if: env.DOCKERHUB_AVAILABLE == 'true' && inputs.push_to_registry
        run: |
          echo "üîç DockerHub Debug Information:"
          echo "DOCKERHUB_NAMESPACE: ${{ env.DOCKERHUB_NAMESPACE }}"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}"
          echo "Target Repository: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}"
          echo "Version: ${{ needs.calculate-version.outputs.version }}"
          echo "Full Image Tag: ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }}"

      - name: Login to DockerHub
        if: env.DOCKERHUB_AVAILABLE == 'true' && inputs.push_to_registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Test DockerHub Access
        if: env.DOCKERHUB_AVAILABLE == 'true' && inputs.push_to_registry
        run: |
          echo "üß™ Testing DockerHub repository access..."

          # Check if we can access the repository info
          echo "üìã Repository info:"
          curl -s "https://hub.docker.com/v2/repositories/${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}" | jq -r '.name, .namespace, .status' || echo "‚ö†Ô∏è Could not fetch repository info"

          # Test push access with a minimal test image
          echo "üî® Building minimal test image..."
          docker build -t ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:access-test - <<EOF
          FROM alpine:3.22
          RUN echo "DockerHub access test - \$(date)" > /test.txt
          CMD cat /test.txt
          EOF

          echo "üöÄ Attempting test push..."
          docker push ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:access-test

          if [ $? -eq 0 ]; then
            echo "‚úÖ Test push successful!"
            # Clean up test tag
            echo "üßπ Cleaning up test tag..."
            docker rmi ${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:access-test || true
          else
            echo "‚ùå Test push failed!"
            echo "üîç Common causes:"
            echo "1. DOCKERHUB_TOKEN is not an Access Token (use Access Token, not password)"
            echo "2. Token doesn't have Write permission"
            echo "3. User '${{ secrets.DOCKERHUB_USER }}' is not a collaborator on '${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}'"
            echo "4. Repository is private and token doesn't have access"
            exit 1
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_AVAILABLE == 'true' && inputs.push_to_registry && format('{0}/{1}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME) || '' }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.calculate-version.outputs.SemVer }}
            type=raw,value=${{ needs.calculate-version.outputs.Major }}.${{ needs.calculate-version.outputs.Minor }},enable=${{ !contains(github.ref_name, 'feature/') }}
            type=raw,value=${{ needs.calculate-version.outputs.Major }},enable=${{ !contains(github.ref_name, 'feature/') }}
            type=raw,value=latest,enable=${{ !contains(github.ref_name, 'feature/') }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=v${{ needs.calculate-version.outputs.version }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: ${{ env.DOCKERHUB_AVAILABLE == 'true' && inputs.push_to_registry }}
          load: true
          tags: |
            ${{ env.DOCKERHUB_AVAILABLE == 'true' && inputs.push_to_registry && format('{0}/{1}:{2}', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME, needs.calculate-version.outputs.version) || format('local/{0}:{1}', env.IMAGE_NAME, needs.calculate-version.outputs.version) }}
            ${{ env.DOCKERHUB_AVAILABLE == 'true' && inputs.push_to_registry && !contains(github.ref_name, 'feature/') && format('{0}/{1}:latest', env.DOCKERHUB_NAMESPACE, env.IMAGE_NAME) || '' }}
          build-args: |
            APP_VERSION=v${{ needs.calculate-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image as artifact
        if: inputs.save_image
        run: |
          docker save local/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.version }} | gzip > docker-image.tar.gz

      - name: Upload Docker image artifact
        if: inputs.save_image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ needs.calculate-version.outputs.version }}
          path: docker-image.tar.gz
          retention-days: 1

      - name: Log push status
        run: |
          if [[ "${{ env.DOCKERHUB_AVAILABLE }}" == "true" && "${{ inputs.push_to_registry }}" == "true" ]]; then
            echo "‚úÖ Image pushed to DockerHub"
          else
            echo "‚è≠Ô∏è DockerHub push skipped"
          fi

  container-structure-test:
    needs: [calculate-version, build-docker-image]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.build-docker-image.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for testing
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: test-image:latest
          build-args: |
            APP_VERSION=v${{ needs.calculate-version.outputs.version }}

      - name: Run Container Structure Tests
        uses: plexsystems/container-structure-test-action@v0.3.0
        with:
          image: test-image:latest
          config: tests/container-structure-test.yaml

      - name: Summary
        if: always()
        run: |
          echo "## üê≥ Container Structure Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: test-image:latest" >> $GITHUB_STEP_SUMMARY
          echo "**Config**: tests/container-structure-test.yaml" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: v${{ needs.calculate-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
